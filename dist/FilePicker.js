!function(e){function t(n){if(o[n])return o[n].exports;var i=o[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var o={};t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}(o(1))},function(e,t,o){"use strict";var n=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=o(2);o(3);var r=function(e){function t(t){var o=e.call(this,t)||this;o.componentId="",o.flowKey="",o.attributes={},o.selectedItem=null,o.text="",o.componentId=t.id,o.flowKey=t.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var i in n.attributes)o.attributes[i]=n.attributes[i];return o}return n(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.componentDidUpdate=function(){},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.render=function(){var e,t=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey),n=this.getAttribute("Title"),r=t.width+"px",a=t.height+"px",l={};if(l.width=r,l.height=a,t.isEditable){e=this.pickFile.bind(this),n+=" - click the area below to choose a file";var s=i.createElement("span",{className:"glyphicon glyphicon-remove file-box-header-button",onClick:this.clearFile.bind(this)})}return i.createElement("div",{className:"file-box",style:l},i.createElement("div",{className:"file-box-header"},i.createElement("div",{style:{float:"left"}},i.createElement("span",{className:"file-box-header-title"},n)),i.createElement("div",{style:{float:"right"}},s)),i.createElement("div",{className:"file-box-body",onClick:e},i.createElement("img",{ref:"img",className:"file-image",src:o.contentValue}),i.createElement("input",{ref:"file",type:"file",className:"file-file",onChange:this.fileSelected.bind(this)})))},t.prototype.clearFile=function(){this.refs.file},t.prototype.pickFile=function(){var e;e=this.refs.file,e.click()},t.prototype.fileSelected=function(){var e;if(e=this.refs.file,e.files&&e.files.length>0){var t=(manywho.model.getComponent(this.componentId,this.flowKey),manywho.state.getComponent(this.componentId,this.flowKey),this),o=new FileReader;o.onload=function(e){t.ResizeBase64Img(e.target.result,400)},o.readAsDataURL(e.files[0])}},t.prototype.ResizeBase64Img=function(e,t){var o=manywho.state.getComponent(this.componentId,this.flowKey),n=(manywho.model.getComponent(this.componentId,this.flowKey),new Image),i=this;n.onload=function(){var e=n.height/n.width,r=document.createElement("canvas");n.width;r.width=t,r.height=t*e;var a=r.getContext("2d");n.width;a.scale(r.width/n.width,r.height/n.height),a.drawImage(n,0,0);var l=r.toDataURL();o.contentValue=l,n.src=l,i.forceUpdate()},n.src=e},t}(i.Component);manywho.component.register("FilePicker",r),t.default=r},function(e,t){e.exports=React},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,