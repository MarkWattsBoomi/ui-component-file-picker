!function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(1))},function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);n(3);var r=function(e){function t(t){var n=e.call(this,t)||this;n.componentId="",n.flowKey="",n.attributes={},n.selectedItem=null,n.text="",n.componentId=t.id,n.flowKey=t.flowKey;var o=manywho.model.getComponent(n.props.id,n.props.flowKey);if(o.attributes)for(var i in o.attributes)n.attributes[i]=o.attributes[i];return n}return o(t,e),t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.componentDidUpdate=function(){},t.prototype.getAttribute=function(e){return this.attributes[e]?this.attributes[e]:null},t.prototype.render=function(){var e,t=manywho.model.getComponent(this.componentId,this.flowKey),n=manywho.state.getComponent(this.componentId,this.flowKey),o=this.getAttribute("Title")||"Select File",r=t.width+"px",a=t.height+"px",l={};if(l.width=r,l.height=a,t.isEditable){e=this.pickFile.bind(this);var s=i.createElement("span",{className:"glyphicon glyphicon-remove file-box-header-button",onClick:this.clearFile.bind(this)})}return i.createElement("div",{className:"file-box",style:l},i.createElement("div",{className:"file-box-header"},i.createElement("div",{className:"file-box-header-left"},i.createElement("span",{className:"file-box-header-title"},o)),i.createElement("div",{className:"file-box-header-right"},s)),i.createElement("div",{className:"file-box-body",onClick:e},i.createElement("img",{ref:"img",className:"file-image",src:n.contentValue}),i.createElement("input",{ref:"file",type:"file",className:"file-file",onChange:this.fileSelected.bind(this)})))},t.prototype.clearFile=function(){this.refs.file},t.prototype.pickFile=function(){var e;e=this.refs.file,e.click()},t.prototype.fileSelected=function(){var e;if(e=this.refs.file,e.files&&e.files.length>0){var t=(manywho.model.getComponent(this.componentId,this.flowKey),manywho.state.getComponent(this.componentId,this.flowKey),this),n=new FileReader;n.onload=function(e){t.ResizeBase64Img(e.target.result,400)},n.readAsDataURL(e.files[0])}},t.prototype.ResizeBase64Img=function(e,t){var n=manywho.state.getComponent(this.componentId,this.flowKey),o=(manywho.model.getComponent(this.componentId,this.flowKey),new Image),i=this;o.onload=function(){var e=o.height/o.width,r=document.createElement("canvas");o.width;r.width=t,r.height=t*e;var a=r.getContext("2d");o.width;a.scale(r.width/o.width,r.height/o.height),a.drawImage(o,0,0);var l=r.toDataURL();n.contentValue=l,o.src=l,i.forceUpdate()},o.src=e},t}(i.Component);manywho.component.register("FilePicker",r),t.default=r},function(e,t){e.exports=React},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,